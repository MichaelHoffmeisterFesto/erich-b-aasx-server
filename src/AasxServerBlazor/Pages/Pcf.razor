@page "/pcf";

@using Data
@inject AASService SubmodelService
@using AasxServer;
@using static AdminShellNS.AdminShellV20;
@using System.Drawing;
@using System.Globalization;
@implements IDisposable

<div class="relative flex min-h-screen flex-col justify-center overflow-hidden bg-gray-50 py-6 sm:py-12">
    <img src="https://play.tailwindcss.com/img/beams.jpg" alt="" class="absolute top-1/2 left-1/2 max-w-none -translate-x-1/2 -translate-y-1/2" width="1308" />

    @{
        DateTime timeStamp = DateTime.UtcNow;
        // AasxTask.cfpNode node = AasxTask.createCfpTree(0, timeStamp);
        // AasxTask.cfpNode node = AasxTask.root;
        float total = 0.0f;
        try
        {
            total = (float)Convert.ToDouble(AasxTask.root.cradleToGateCombination.value, CultureInfo.InvariantCulture);
        }
        catch { }

        nextLevel(AasxTask.root, total, timeStamp);
    }
</div>

@{
    void nextLevel(AasxTask.cfpNode nextNode, float total, DateTime timeStamp, bool moduleOnly = false)
    {
        <div class="mb-2 relative bg-white px-6 pt-4 pb-2 shadow-xl ring-1 ring-gray-900/5 sm:mx-auto sm:rounded-lg sm:px-8">

            @{
                AasxTask.cfpNode node = nextNode;
                while (node != null)
                {
                    if (node.iChild == 0)
                    {

                        bool view = false;
                        string value = "";
                        if (moduleOnly)
                        {
                            if (node.cradleToGateModule != null)
                            {
                                value = node.cradleToGateModule.value;
                                view = true;
                            }
                        }
                        else
                        {
                            if (node.children.Count != 0)
                            {
                                if (node.cradleToGateCombination != null)
                                {
                                    value = node.cradleToGateCombination.value;
                                    view = true;
                                }
                            }
                            else
                            {
                                if (node.cradleToGateModule != null)
                                {
                                    value = node.cradleToGateModule.value;
                                    view = true;
                                }
                            }
                        }
                        float actual = 0.0f;
                        try
                        {
                            actual = (float)Convert.ToDouble(value, CultureInfo.InvariantCulture);
                        }
                        catch { }

                        if (view)
                        {
                            string productImage = getImage(node.productImage, node.envIndex);
                            string manufacturerLogo = getImage(node.manufacturerLogo, node.envIndex);
                            float p = actual / total * 100;
                            if (p < 1)
                                p = 1;
                            string percent = "0";
                            try
                            {
                                percent = Convert.ToInt32(p).ToString();
                            }
                            catch { }
                            value = Math.Round(actual, 3).ToString(CultureInfo.InvariantCulture);

                        <div class="mb-2 flex flex-row space-x-2">

                            <div class="grid place-items-center self-center">
                                <div class="w-10">
                                    <svg height="35" width="35" viewBox="0 0 20 20">
                                        <circle r="5" cx="10" cy="10" fill="white"
                                                stroke="blue"
                                                stroke-width="10"
                                                stroke-dasharray="calc(@percent * 31.42px / 100) 31.42"
                                                transform="rotate(-90) translate(-20)" />
                                        <circle r="9.5" cx="10" cy="10" fill="white"
                                                stroke-width="0.5"
                                                fill-opacity="0"
                                                stroke="blue"
                                                transform="rotate(-90) translate(-20)" />
                                    </svg>
                                </div>
                                <div class="self-center">@value</div>
                            </div>
                            @if (productImage != null)
                            {
                                <img src=data:image;base64,@productImage class="h-16" />
                            }
                            @if (manufacturerLogo != null)
                            {
                                var bytes = Convert.FromBase64String(manufacturerLogo);
                                var stream = new System.IO.MemoryStream(bytes);
                                System.Drawing.Image img = System.Drawing.Image.FromStream(stream);
                                double idealArea = 1500;
                                var maxWidth = Math.Round(img.Width * Math.Sqrt(idealArea / ((double)img.Width * (double)img.Height)));
                                var maxWidthPx = maxWidth + "px";
                                <img src=data:image;base64,@manufacturerLogo style="max-width: @maxWidthPx; object-fit: contain;" class="self-center" />
                            }
                            <div class="self-center">
                                <div class="font-bold text-slate-700 dark:text-slate-500">@node.productDesignation</div>
                            </div>
                        </div>
                            if (!moduleOnly && node.children.Count != 0 && node.cradleToGateModule != null)
                            {
                                nextLevel(node, total, timeStamp, true);
                            }
                        }
                    }

                    // move up, if all children iterated
                    if (moduleOnly || node.iChild == node.children.Count)
                    {
                        node.iChild = 0;
                        node = null;
                    }
                    else
                    {
                        // Interate children
                        nextLevel(node.children[node.iChild], total, timeStamp);
                        node.iChild++;
                    }
                }
                }

        </div>
    }

    string getImage(File f, int envIndex)
    {
        if (f == null || envIndex == -1)
            return null;

        if (f.value != "")
        {
            string[] split = f.value.Split(new Char[] { '/' });
            if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
            {
                split = f.value.Split(new Char[] { '.' });
                switch (split.Last().ToLower())
                {
                    case "jpg":
                    case "bmp":
                    case "png":
                        System.IO.Stream s = null;
                        try
                        {
                            s = Program.env[envIndex].GetLocalStreamFromPackage(f.value);
                        }
                        catch { }
                        if (s != null)
                        {
                            using (var m = new System.IO.MemoryStream())
                            {
                                s.CopyTo(m);
                                return System.Convert.ToBase64String(m.ToArray());
                            }
                        }
                        break;
                }
            }
        }
        return null;
    }
}

@code {

    protected override void OnInitialized()
    {
        SubmodelService.NewDataAvailable += NewData;
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        if (args is Program.NewDataAvailableArgs newArgs)
        {
            int newDataMode = newArgs.signalNewDataMode;
            if (newDataMode != 0)
            {
                InvokeAsync(() => this.StateHasChanged());
            }
        }
    }
}
