@using AasxServer;
@using static AdminShellNS.AdminShellV20;
@using System.Drawing;

@page "/pcf";

@{
    DateTime timeStamp = DateTime.UtcNow;
    // Dictionary<string, AasxTask.cfpNode> assetCfp = new Dictionary<string, AasxTask.cfpNode>();
    // AasxTask.cfpNode root = null;
    AasxTask.cfpNode node = AasxTask.createCfpTree(0, timeStamp);
    List<AasxTask.cfpNode> stack = new List<AasxTask.cfpNode>();
    int sp = -1;
    float total = 0.0f;
    try
    {
        total = (float)Convert.ToDouble(node.cradleToGateCombination.value);
    }
    catch { }

    while (node != null)
    {
        if (node.iChild == 0)
        {
            for (int mode = 0; mode <= 1; mode++)
            {
                // mode = 0; cradleToGateCombination
                // mode = 1; cradleToGateModule
                bool view = false;
                string value = "";
                int indent = 0;
                string minwidth = "";
                if (mode == 0)
                {
                    if (node.cradleToGateCombination != null)
                    {
                        value = node.cradleToGateCombination.value;
                        indent = 5 * (sp + 1);
                        minwidth = "min-width:" + indent + "em";
                        view = true;
                    }
                }
                if (mode == 1)
                {
                    if (node.cradleToGateModule != null)
                    {
                        value = node.cradleToGateModule.value;
                        indent = 5 * (sp + 1);
                        if (node.cradleToGateCombination != null)
                            indent = 5 * (sp + 2);
                        minwidth = "min-width:" + indent + "em";
                        view = true;
                    }
                }
                if (view)
                {
                    string image = "";
                    <table>
                        <tr>
                            <td style="@minwidth"></td>
                            @if (node.productImage != null)
                            {
                                <td>
                                    <p>
                                        <bold>
                                            @{
                                                image = getImage(node.productImage, node.envIndex);
                                                if (image != null)
                                                {
                                                    <img src=data:image;base64,@image style="height:60px;" alt="" />
                                                }
                                            }
                                        </bold>
                                    </p>
                                </td>
                            }
                            <td><p style="border: 3px solid blue; padding: 1em"><strong>@node.aas.idShort</strong></p></td>
                            <td>
                                <p style="border: 3px solid blue; padding: 1em"><strong>@value</strong></p>
                            </td>
                            <td>
                                @{
                                    float actual = 0.0f;
                                    try
                                    {
                                        actual = (float)Convert.ToDouble(value);
                                    }
                                    catch { }


                                    Bitmap bmp = new Bitmap(200, 200);
                                    Graphics g = Graphics.FromImage(bmp);
                                    g.Clear(Color.White);

                                    Brush blueBrush = new SolidBrush(Color.Blue);
                                    Pen bluePen = new Pen(Color.Blue, 3.0f);

                                    Rectangle rect = new Rectangle(10, 10, 190, 190);

                                    float startAngle = 270.0f;
                                    float sweepAngle = 360.0f * (actual / total);

                                    g.DrawEllipse(bluePen, rect);
                                    g.FillPie(blueBrush, rect, startAngle, sweepAngle);

                                    System.IO.MemoryStream stream = new System.IO.MemoryStream();
                                    bmp.Save(stream, System.Drawing.Imaging.ImageFormat.Bmp);
                                    byte[] imageBytes = stream.ToArray();
                                    string pie = System.Convert.ToBase64String(imageBytes);
                                }
                                <p>
                                    <img src=data:image;base64,@pie style="height:60px;" alt="" />
                                </p>
                            </td>
                            @if (node.manufacturerLogo != null)
                            {
                                <td>
                                    <p>
                                        <bold>
                                            @{
                                                image = getImage(node.manufacturerLogo, node.envIndex);
                                                if (image != null)
                                                {
                                                    <img src=data:image;base64,@image style="height:40px;" alt="" />
                                                }
                                            }
                                        </bold>
                                    </p>
                                </td>
                            }
                        </tr>
                    </table>
                }
            }
        }

        // move up, if all children iterated
        if (node.iChild == node.children.Count)
        {
            if (sp == -1)
            {
                node = null;
            }
            else
            {
                node = stack[sp];
                stack.RemoveAt(sp);
                sp--;
            }
        }
        else
        {
            // Interate children
            stack.Add(node);
            sp++;
            node = node.children[node.iChild++];
        }
    }

    string getImage(File f, int envIndex)
    {
        if (f == null || envIndex == -1)
            return null;

        if (f.value != "")
        {
            string[] split = f.value.Split(new Char[] { '/' });
            if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
            {
                split = f.value.Split(new Char[] { '.' });
                switch (split.Last().ToLower())
                {
                    case "jpg":
                    case "bmp":
                    case "png":
                        System.IO.Stream s = null;
                        try
                        {
                            s = Program.env[envIndex].GetLocalStreamFromPackage(f.value);
                        }
                        catch { }
                        if (s != null)
                        {
                            using (var m = new System.IO.MemoryStream())
                            {
                                s.CopyTo(m);
                                return System.Convert.ToBase64String(m.ToArray());
                            }
                        }
                        break;
                }
            }
        }
        return null;
    }
}


@code {

}
